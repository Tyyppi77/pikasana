{"version":3,"sources":["gameSlice.js","playersSlice.js","Game.js","useField.js","Launch.js","Results.js","App.js","store.js","index.js"],"names":["chooseRandomLetter","options","alphabet","Math","floor","random","length","initialState","topics","arrayShuffle","slice","currentRound","totalRounds","currentLetter","previousLetter","waitDuration","scoreAddition","scoredPlayers","gameSlice","createSlice","name","reducers","nextTopic","state","requestNewLetter","revealNewLetter","markPlayerAsScored","action","push","payload","resetGame","actions","playersSlice","addPlayer","score","sort","a","b","aName","toUpperCase","bName","removePlayer","filter","player","awardScore","map","addition","clearScores","RoundInfo","game","useSelector","history","useHistory","dispatch","useDispatch","counting","isFinalRound","continueText","className","isPlaying","duration","size","strokeWidth","colors","trailColor","onComplete","remainingTime","type","onClick","disabled","Player","scored","undefined","find","p","Players","players","Game","useField","onChangeCallback","useState","value","setValue","onChange","event","target","Launch","playerName","resetPlayerName","onSubmit","preventDefault","placeholder","id","concat","winner","rest","start","Results","reset","class","App","path","store","configureStore","reducer","playersReducer","gameReducer","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.f50a3e57.chunk.js","sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\r\n\r\nimport arrayShuffle from \"array-shuffle\";\r\n\r\nimport topics from \"./topics.json\"\r\n\r\nconst totalRounds = 25\r\n\r\nexport const chooseRandomLetter = (options) => {\r\n    const alphabet = \"aaabcdeefghhiijjkkklllmmnnnnoopprrsssttuuvvwyäö\"\r\n    return alphabet[Math.floor(Math.random() * alphabet.length)]\r\n}\r\n\r\nconst longWait = 3\r\nconst shortWait = 1\r\n\r\nconst initialState = () => {\r\n    return {\r\n        topics: arrayShuffle(topics).slice(0, totalRounds),\r\n        currentRound: 0,\r\n        totalRounds,\r\n\r\n        currentLetter: \"-\",\r\n        previousLetter: \"\",\r\n        waitDuration: longWait,\r\n\r\n        scoreAddition: 1,\r\n        scoredPlayers: []\r\n    }\r\n}\r\n\r\nexport const gameSlice = createSlice({\r\n    name: \"game\",\r\n    initialState: initialState(),\r\n    reducers: {\r\n        nextTopic: state => {\r\n            state.currentRound += 1\r\n            state.scoreAddition = 1\r\n            state.currentLetter = \"-\"\r\n            state.waitDuration = longWait\r\n            state.scoredPlayers = []\r\n        },\r\n        requestNewLetter: state => {\r\n            state.previousLetter = state.currentLetter\r\n            state.currentLetter = \"-\"\r\n            state.waitDuration = shortWait\r\n            state.scoreAddition += 1\r\n        },\r\n        revealNewLetter: state => {\r\n            do {\r\n                state.currentLetter = chooseRandomLetter()\r\n            }\r\n            while (state.currentLetter === state.previousLetter)\r\n        },\r\n        markPlayerAsScored: (state, action) => {\r\n            state.scoredPlayers.push(action.payload)\r\n        },\r\n        resetGame: state => {\r\n            return initialState()\r\n        }\r\n    }\r\n})\r\n\r\nexport const { nextTopic, requestNewLetter, revealNewLetter, markPlayerAsScored, resetGame } = gameSlice.actions\r\n\r\nexport default gameSlice.reducer\r\n","import { createSlice } from \"@reduxjs/toolkit\";\r\n\r\nexport const playersSlice = createSlice({\r\n    name: \"players\",\r\n    initialState: [],\r\n    reducers: {\r\n        addPlayer: (state, action) => {\r\n            state.push({ name: action.payload, score: 0 })\r\n            state.sort((a, b) => {\r\n                const aName = a.name.toUpperCase()\r\n                const bName = b.name.toUpperCase()\r\n                if (aName < bName) return -1;\r\n                if (aName > bName) return 1;\r\n                return 0;\r\n            })\r\n        },\r\n        removePlayer: (state, action) => {\r\n            return state.filter(player => player.name !== action.payload)\r\n        },\r\n        awardScore: (state, action) => {\r\n            return state.map(player => player.name === action.payload.name ? { ...player, score: player.score + action.payload.addition} : player)\r\n        },\r\n        clearScores: state => {\r\n            return state.map(player => ({...player, score: 0}))\r\n        }\r\n    }\r\n})\r\n\r\nexport const { addPlayer, removePlayer, awardScore, clearScores } = playersSlice.actions\r\n\r\nexport default playersSlice.reducer\r\n","import React, { useState, useEffect, } from \"react\";\r\nimport { CountdownCircleTimer } from 'react-countdown-circle-timer'\r\nimport { nextTopic, requestNewLetter, revealNewLetter, markPlayerAsScored } from \"./gameSlice\"\r\nimport { awardScore } from \"./playersSlice\"\r\n\r\nimport { useSelector, useDispatch } from 'react-redux'\r\nimport { useHistory } from \"react-router\";\r\n\r\nconst RoundInfo = () => {\r\n    const game = useSelector(state => state.game)\r\n    const history = useHistory()\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const revealLetter = () => {\r\n        dispatch(revealNewLetter())\r\n    }\r\n\r\n    const nextLetterCallback = () => {\r\n        dispatch(requestNewLetter())\r\n    }\r\n\r\n    const counting = game.currentLetter === '-'\r\n\r\n    const isFinalRound = game.currentRound === game.totalRounds - 1\r\n    const continueText = isFinalRound ? \"Lopeta\" : \"Uusi aihe\"\r\n\r\n    const continueCallback = () => {\r\n        if (isFinalRound)\r\n            history.push(\"/results\")\r\n        else\r\n            dispatch(nextTopic())\r\n    }\r\n  \r\n    return (\r\n        <div className=\"round-info\">\r\n            <span className=\"topic-parent\">\r\n                <h5 className=\"topic-title\">Aihe ({game.currentRound + 1}/{game.totalRounds}):</h5>\r\n                <h3 className=\"topic\">{game.topics[game.currentRound]}</h3>\r\n            </span>\r\n            <div className=\"letter-wrapper\">\r\n                {\r\n                    counting\r\n                    ? (\r\n                        <CountdownCircleTimer\r\n                            isPlaying={true}\r\n                            duration={game.waitDuration}\r\n                            size={300}\r\n                            strokeWidth={20}\r\n                            colors={[\r\n                                ['#ffffff', 1.0],\r\n                            ]}\r\n                            trailColor=\"rgba(0, 0, 0, 0.1)\"\r\n                            onComplete={revealLetter}\r\n                        >\r\n                            {({ remainingTime }) => remainingTime}\r\n                        </CountdownCircleTimer>\r\n                    )\r\n                    : <h1 className={`letter ${counting ? \"\" : \"bounce\"}`}>{game.currentLetter}</h1>\r\n                }\r\n            </div>\r\n\r\n            <span className=\"round-bottom\">\r\n                <button type=\"button\" onClick={nextLetterCallback} disabled={counting || game.scoredPlayers.length > 0} className=\"link-button\">Uusi kirjain</button>\r\n                <button type=\"button\" onClick={continueCallback} disabled={counting} className=\"new-topic\">{continueText}</button>\r\n            </span>\r\n        </div>\r\n    );\r\n};\r\n\r\nconst Player = ({ player }) => {\r\n    const game = useSelector(state => state.game)\r\n    const dispatch = useDispatch()\r\n\r\n    const clickCallback = () => {\r\n        dispatch(awardScore({ name: player.name, addition: game.scoreAddition }))\r\n        dispatch(markPlayerAsScored(player.name))\r\n    }\r\n\r\n    const scored = game.scoredPlayers.find(p => p === player.name) !== undefined\r\n\r\n    return (\r\n        <button className=\"player\" onClick={clickCallback} disabled={scored}>\r\n            {player.name} ({player.score})\r\n        </button>\r\n    )\r\n}\r\n\r\nconst Players = () => {\r\n    const game = useSelector(state => state.game)\r\n    const players = useSelector(state => state.players)\r\n\r\n    return (\r\n        <div className=\"players\">\r\n            <header>\r\n                <h4>Anna pisteitä (jaossa {game.scoreAddition})</h4>\r\n            </header>\r\n            <div className=\"players-grid\">\r\n                { players.map(player => <Player key={player.name} player={player} />) }\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst Game = () => {\r\n    return (\r\n        <div className=\"page game\">\r\n            <RoundInfo />\r\n            <Players />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Game","import React, { useState } from 'react'\r\n\r\nconst useField = (type, onChangeCallback) => {\r\n    const [value, setValue] = useState('')\r\n\r\n    const onChange = (event) => {\r\n        setValue(event.target.value)\r\n        onChangeCallback(event.target.value)\r\n    }\r\n\r\n    const reset = () => {\r\n        setValue('')\r\n    }\r\n\r\n    return [{\r\n        type,\r\n        value,\r\n        onChange,\r\n    }, reset]\r\n}\r\n\r\nexport default useField\r\n","import React from 'react';\r\nimport './App.css';\r\nimport { useSelector, useDispatch } from 'react-redux'\r\nimport { addPlayer, removePlayer } from \"./playersSlice\"\r\nimport { useHistory } from 'react-router';\r\n\r\nimport useField from './useField'\r\n\r\nconst Player = ({ name }) => {\r\n    const dispatch = useDispatch()\r\n\r\n    const onClick = () => {\r\n        dispatch(removePlayer(name))\r\n    }\r\n\r\n    return (\r\n        <button className=\"player\" onClick={onClick}>\r\n            {name}\r\n        </button>\r\n    )\r\n}\r\n\r\nconst Launch = () => {\r\n    const players = useSelector(state => state.players)\r\n    const dispatch = useDispatch()\r\n    const history = useHistory()\r\n\r\n    const addPlayerCallback = (event) => {\r\n        event.preventDefault()\r\n        const name = playerName.value\r\n        if (playerName.value.length > 0 && players.find(player => player.name === name) === undefined) {\r\n            dispatch(addPlayer(name))\r\n            resetPlayerName()\r\n        }\r\n    }\r\n\r\n    const startGame = () => {\r\n        history.push(\"/game\")\r\n    }\r\n\r\n    const [playerName, resetPlayerName] = useField(\"text\", () => {})\r\n\r\n    return (\r\n        <div className=\"page launch\">\r\n            <header className=\"title\">\r\n                <h1 className=\"title-bounce\">Pikasana</h1>\r\n                <button type=\"button\" onClick={startGame} disabled={players.length < 2}>Aloita</button>\r\n            </header>\r\n            <div className=\"players\">\r\n                <header>\r\n                    <form className=\"input-group\" onSubmit={addPlayerCallback}>\r\n                        <input placeholder=\"Lisää pelaaja\" name=\"player\" id=\"player\" {...playerName}></input>\r\n                    </form>\r\n\r\n                    <span className=\"title-line\">\r\n                        <h1>Pelaajat ({players.length}):</h1>\r\n                        <h3>Poista napauttamalla</h3>\r\n                    </span>\r\n                </header>\r\n                <div className=\"players-grid\">\r\n                    { players.map(player => <Player key={player.name} name={player.name} />) }\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Launch;","import React from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { useHistory } from 'react-router'\r\n\r\nimport { resetGame } from \"./gameSlice\"\r\nimport { clearScores } from \"./playersSlice\"\r\n\r\nconst Player = ({ player }) => {\r\n    return (<li>{player.name} ({player.score})</li>)\r\n}\r\n\r\nconst Players = () => {\r\n    const players = useSelector(state => state.players).concat()\r\n    players.sort((a, b) => b.score - a.score)\r\n\r\n    const winner = players[0]\r\n    const rest = players.slice(1)\r\n\r\n    return (\r\n        <>\r\n            <h2 className=\"bounce\">Voittaja: {winner.name} ({winner.score})</h2>\r\n            <ol start=\"2\">\r\n                {\r\n                    rest.map(player => <Player key={player.name} player={player} />)\r\n                }\r\n            </ol>\r\n        </>\r\n    )\r\n}\r\n\r\nconst Results = () => {\r\n    const dispatch = useDispatch()\r\n    const history = useHistory()\r\n\r\n    const reset = () => {\r\n        dispatch(clearScores())\r\n        dispatch(resetGame())\r\n    }\r\n\r\n    const rematch = () => {\r\n        reset()\r\n        history.push(\"/game\")\r\n    }\r\n\r\n    const returnToFront = () => {\r\n        reset()\r\n        history.push(\"/\")\r\n    }\r\n\r\n    return (\r\n        <div className=\"page results\">\r\n            <header>\r\n                <h1>Tulokset</h1>\r\n            </header>\r\n\r\n            <Players />\r\n\r\n            <div class=\"actions\">\r\n                <button onClick={rematch}>Revanssi</button>\r\n                <button onClick={returnToFront}>Etusivu</button>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Results\r\n","import React from 'react';\r\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\r\nimport './App.css';\r\nimport Game from './Game';\r\nimport Launch from './Launch';\r\nimport Results from './Results';\r\n\r\nfunction App() {\r\n    return (\r\n        <Router>\r\n            <Switch>\r\n                <Route path=\"/game\">\r\n                    <Game />\r\n                </Route>\r\n                <Route path=\"/results\">\r\n                    <Results />\r\n                </Route>\r\n                <Route path=\"/\">\r\n                    <Launch />\r\n                </Route>\r\n            </Switch>\r\n        </Router>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","import { configureStore } from '@reduxjs/toolkit';\r\nimport playersReducer from './playersSlice';\r\nimport gameReducer from \"./gameSlice\"\r\n\r\nexport const store = configureStore({\r\n  reducer: {\r\n    players: playersReducer,\r\n    game: gameReducer\r\n  },\r\n});\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport { store } from './store';\r\nimport { Provider } from 'react-redux';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <App />\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}